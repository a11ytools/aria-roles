name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        # Disable cache to avoid post-job cleanup errors
        # cache: 'npm'
    - run: npm ci
    - run: npm run build
    - run: npm test

  publish:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
    # Use regular npm install instead of ci to avoid cache issues
    - run: npm install
    - run: npm run build
    - name: Check version change
      id: check_version
      run: |
        PUBLISHED_VERSION=$(npm view @a11ytools/aria-roles version || echo "0.0.0")
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [ "$PUBLISHED_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "Version changed from $PUBLISHED_VERSION to $PACKAGE_VERSION"
          echo "version_changed=true" >> $GITHUB_OUTPUT
        else
          echo "Version unchanged"
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi
    - name: Publish to npm
      if: steps.check_version.outputs.version_changed == 'true'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 