name: CI/CD

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        # Disable cache to avoid post-job cleanup errors
        # cache: 'npm'
    - run: npm ci
    - run: npm run build
    - run: npm test

  publish:
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
    # Use npm ci for more reliable installations
    - run: npm ci
    - run: npm run build
    
    - name: Extract tag version
      id: get_tag_version
      run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Get package version
      id: get_package_version
      run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    
    - name: Verify versions match
      run: |
        if [ "${{ steps.get_tag_version.outputs.TAG_VERSION }}" != "${{ steps.get_package_version.outputs.PACKAGE_VERSION }}" ]; then
          echo "Error: Tag version (${{ steps.get_tag_version.outputs.TAG_VERSION }}) does not match package.json version (${{ steps.get_package_version.outputs.PACKAGE_VERSION }})"
          exit 1
        fi
        echo "âœ… Versions match: ${{ steps.get_package_version.outputs.PACKAGE_VERSION }}"
    
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 